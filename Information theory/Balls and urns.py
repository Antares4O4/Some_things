import math  # Импортируем модуль math для математических операций


# Функция для расчета энтропии, которая гарантирует, что энтропия >= 0
def entropy(probabilities):
    # Вычисляем энтропию по формуле: H(X) = -Σ(P(x) * log2(P(x)))
    ent = -sum(p * math.log2(p) for p in probabilities if p > 0)  # Суммируем только положительные вероятности
    return max(ent, 0)  # Возвращаем максимум между рассчитанной энтропией и 0, чтобы избежать отрицательных значений


# Функция для безопасного ввода целых чисел
def input_positive_int(prompt):
    while True:
        value = input(prompt)  # Запрашиваем ввод у пользователя
        if value.isdigit() and int(value) >= 0:  # Проверяем, что введена цифра и значение >= 0
            return int(value)  # Если введено корректное значение, возвращаем его как целое число
        else:
            print("Ошибка: пожалуйста, введите положительное число.")  # Сообщаем об ошибке


# --- Задача 1: Урна с двумя извлечениями ---
def calculate_entropies_for_urn():
    # Ввод данных пользователем с проверкой
    while True:
        m = input_positive_int("Введите количество белых шаров в урне: ")  # Ввод количества белых шаров
        n = input_positive_int("Введите общее количество шаров в урне: ")  # Ввод общего количества шаров
        if m > n:
            print("Ошибка: количество белых шаров не может быть больше общего количества шаров. Попробуйте снова.")
        else:
            break  # Если данные введены корректно, выходим из цикла

    # Вероятности для первого извлечения (A)
    P_A_white = m / n  # Вероятность извлечения белого шара
    P_A_black = (n - m) / n  # Вероятность извлечения черного шара

    # Энтропия для первого извлечения H(A)
    H_A = entropy([P_A_white, P_A_black])  # Вычисляем энтропию для первого извлечения

    # Вероятности для второго извлечения при разных условиях:
    # Если первый шар был белым
    P_B_white_extracted_A_white = (m - 1) / (
                n - 1) if n > 1 else 0  # Вероятность извлечения белого шара во втором извлечении при условии, что первый был белым
    P_B_black_extracted_A_white = (n - m) / (
                n - 1) if n > 1 else 0  # Вероятность извлечения черного шара во втором извлечении при условии, что первый был белым

    # Если первый шар был черным
    P_B_white_extracted_A_black = m / (
                n - 1) if n > 1 else 0  # Вероятность извлечения белого шара во втором извлечении при условии, что первый был черным
    P_B_black_extracted_A_black = (n - m - 1) / (
                n - 1) if n > 1 else 0  # Вероятность извлечения черного шара во втором извлечении при условии, что первый был черным

    # Условные энтропии H(B|A=белый) и H(B|A=черный)
    H_B_extracted_A_white = entropy(
        [P_B_white_extracted_A_white, P_B_black_extracted_A_white])  # Энтропия второго извлечения, если первый был белым
    H_B_extracted_A_black = entropy(
        [P_B_white_extracted_A_black, P_B_black_extracted_A_black])  # Энтропия второго извлечения, если первый был черным

    # Полная условная энтропия H(B|A)
    H_B_extracted_A = P_A_white * H_B_extracted_A_white + P_A_black * H_B_extracted_A_black  # Объединяем условные энтропии

    # Совместная энтропия H(AB)
    H_AB = H_A + H_B_extracted_A  # Совместная энтропия для двух извлечений

    # Вывод результатов
    print(f"\n--- Задача 1 (урна с 2 шарами) ---")
    print(f"Энтропия первого извлечения H(A): {H_A:.4f} бита")  # Выводим энтропию первого извлечения
    print(f"Энтропия второго извлечения H(B): {H_A:.4f} бита")  # Выводим энтропию второго извлечения
    print(f"Условная энтропия H(B|A): {H_B_extracted_A:.4f} бита")  # Выводим условную энтропию второго извлечения
    print(f"Совместная энтропия H(AB): {H_AB:.4f} бита")  # Выводим совместную энтропию


# --- Задача 2: Несколько урн с разными шарами ---
def calculate_entropies_for_multiple_urns():
    urns = []  # Список для хранения информации об урнах
    print(f"\n--- Задача 2 (несколько урн) ---")

    num_urns = input_positive_int("Введите количество урн: ")  # Вводим количество урн

    # Считываем данные для каждой урны
    for i in range(1, num_urns + 1):
        while True:
            print(f"\nУрна {i}:")
            white = input_positive_int(
                f"Введите количество белых шаров для урны {i}: ")  # Вводим количество белых шаров
            blue = input_positive_int(f"Введите количество синих шаров для урны {i}: ")  # Вводим количество синих шаров
            red = input_positive_int(
                f"Введите количество красных шаров для урны {i}: ")  # Вводим количество красных шаров

            # Вычисляем общее количество шаров как сумму
            total_balls = white + blue + red  # Суммируем количество шаров
            print(f"Общее количество шаров для урны {i}: {total_balls}")  # Выводим общее количество шаров

            urns.append((white, blue, red, total_balls))  # Добавляем информацию об урне в список
            break  # Выходим из цикла, если данные введены корректно

    # Вычисление энтропии для каждой урны
    for i, (white, blue, red, total_balls) in enumerate(urns, start=1):
        if total_balls == 0:
            print(f"Урна {i}: нет шаров, энтропия неопределена.")  # Если шаров нет, выводим сообщение
        else:
            probabilities = [white / total_balls, blue / total_balls,
                             red / total_balls]  # Вычисляем вероятности для каждого цвета шаров
            H = entropy(probabilities)  # Вычисляем энтропию для урны
            print(f"Урна {i}: Энтропия = {H:.4f} бита")  # Выводим энтропию


# --- Главная программа для всех задач ---
def main():
    # Выбор задачи
    while True:
        print("\nВыберите задачу для решения:")
        print("1: Несколько урн с разными шарами")  # Опция для первой задачи
        print("2: Урна с двумя извлечениями")  # Опция для второй задачи
        print("0: Выход")  # Опция для выхода из программы

        choice = input("Ваш выбор: ")

        if choice == '1':
            calculate_entropies_for_multiple_urns()  # Вызываем функцию для первой задачи
        elif choice == '2':
            calculate_entropies_for_urn()  # Вызываем функцию для второй задачи
        elif choice == '0':
            print("Выход.")  # Сообщаем о выходе
            break  # Выходим из цикла
        else:
            print("Некорректный выбор. Попробуйте снова.")  # Сообщаем об ошибке


# Запуск программы
if __name__ == "__main__":
    main()  # Запускаем главную программу